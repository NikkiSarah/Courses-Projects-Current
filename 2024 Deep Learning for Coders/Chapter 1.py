# -*- coding: utf-8 -*-
"""Chapter 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15nZ6A8lxDxy8yj-0Hubo5iNXaCwz3GIz

## Image Classification
"""

# import all the functions and classes needed to create a variety of computer
# vision models
from fastai.vision.all import *

# download and extract the Oxford-IIIT Pet Dataset from the fastai datasets
# collection (returns a Path object with the location rather than a string)
path = untar_data(URLs.PETS)/'images'

def is_cat(x):
    return x[0].isupper()

# tell fastai what kind of data we have and how it's structured
# tfms = transforms i.e. what kind of transformations are required during
# training
dls = ImageDataLoaders.from_name_func(
    path, # path
    get_image_files(path), # filenames
    valid_pct=0.2,
    seed=42,
    label_func=is_cat,
    item_tfms=Resize(224)
    )

# fine-tune a pre-trained resnet model
# the first output is the overall results, the second is the results for each
# epoch
learn = vision_learner(dls, resnet34, metrics=error_rate)
learn.fine_tune(3)

from fastai.data.external import *

# display an image of a dog
# (ensure it's saved in the notebook's working directory)
img = PILImage.create('dog.jpg')
img.to_thumb(192)

# check what the model thinks the image is
is_cat, _, probs = learn.predict(img)
print(f"Is this a dog?: {not not is_cat}.")
print(f"Probability it's a dog: {probs[0].item():.6f}")

"""## Image Segmentation"""

from fastai.vision.all import *

# download and extract the Camvid dataset from the fastai datasets
# collection
path = untar_data(URLs.CAMVID_TINY)

# tell fastai what kind of data we have and how it's structured
dls = SegmentationDataLoaders.from_label_func(
    path,
    bs=8,
    fnames = get_image_files(path/"images"),
    label_func = lambda o: path/'labels'/f'{o.stem}_P{o.suffix}',
    codes = np.loadtxt(path/'codes.txt', dtype=str)
    )

# fine-tune a pre-trained resnet model
learn = unet_learner(dls, resnet34)
learn.fine_tune(10)

# visualise how well the model achieved its task by asking it to colour-code
# every pixel (LHS = ground-truth; RHS = model prediction)
learn.show_results(max_n=4, figsize=(7, 8))

"""## Natural Language Processing"""

# classify movie sentiment
from fastai.text.all import *

path = untar_data(URLs.IMDB)
dls = TextDataLoaders.from_folder(path, valid='test')

learn = text_classifier_learner(dls, AWD_LSTM, drop_mult=0.5, metrics=accuracy)
learn.fine_tune(5, 1e-2)

# test the model on a short review
# part 1 = prediction; part 2 = index of "pos" in the vocab;
# part 3 = probabilities attached to each class
learn.predict("That movie was ok but it was a little boring in parts.")

"""## Tabular Models"""

# train a model to predict whether a person is a high-income earner based on
# their socioeconomic backgroun

from fastai.tabular.all import *

path = untar_data(URLs.ADULT_SAMPLE)

dls = TabularDataLoaders.from_csv(
    path/'adult.csv',
    path=path,
    y_names="salary",
    # tell the model which variables are categorical and which are continuous
    cat_names = ['workclass', 'education', 'marital-status', 'occupation',
                 'relationship', 'race'],
    cont_names = ['age', 'fnlwgt', 'education-num'],
    procs = [Categorify, FillMissing, Normalize]
    )

learn = tabular_learner(dls, metrics=accuracy)
# there are no pre-trained models for tabular data
learn.fit_one_cycle(3)

"""## Recommendation Systems"""

# train a model to predict movies customers may like based on their previous
# viewing habits using the MovieLens dataset

from fastai.collab import *

path = untar_data(URLs.ML_SAMPLE)

dls = CollabDataLoaders.from_csv(path/'ratings.csv')

# predict movie ratings on a range of 0.5 to 5.0
# not actually fine-tuning a pre-trained model, but fastai let's us do it
# anyway (we'll see why it works later)
learn = collab_learner(dls, y_range=(0.5, 5.5))
learn.fine_tune(10)

# view a sample of the ground-truth vs predicted ratings
learn.show_results()